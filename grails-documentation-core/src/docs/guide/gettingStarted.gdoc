h3. Checking out and Building 

The project is currently hosted on Github at [https://github.com/grails/grails-data-mapping].

You are free to fork the project from there or clone it anonymously using git:

{code}
git clone git@github.com:grails/grails-data-mapping.git
cd grails-data-mapping
{code}

The project has a [Gradle|http://gradle.org] build. You will need Intellij 15 or greater to work with the source code.

Use the Intellij 15 Gradle tooling to import the project.


To build the project you can run the @assemble@ task:

{code}
./gradlew assemble
{code}

To install the jar files for the various subprojects into your local Maven repository you can run:

{code}
./gradlew install
{code}

To build all of the documentation run the command:

{code}
./gradlew allDocs
{code}

Documentation will produced in the @build/docs@ directory.

{note}
If you experience PermGen errors when building documentation you may need to increase the JVM permgen inside GRADLE_OPTS
{note}

h3. Project Structure

The project is essentially a multi-project Gradle build. There is a core API and then subprojects that implement that API. The core API subprojects include:

* @grails-datastore-core@ - The core API, this provides core interfaces for implementing a GORM provider
* @grails-datastore-gorm@ - The runtime meta-programming and AST transformation infrastructure behind GORM. Also provides end users APIs like @grails.gorm.CriteriaBuilder@ and @grails.gorm.DetachedCriteria@ 
* @grails-datastore-gorm-support@ - Support classes for easing the writing of a GORM plugin for Grails
* @grails-datastore-gorm-tck@ - The TCK that includes hundreds of Spock specifications that a GORM implementation will need to pass
* @grails-datastore-web@ - Classes required to integrate GORM into a web tier

Beyond these core subprojects there are implementations for various datastores. For example:

* @grails-datastore-mongodb/grails-datastore-gorm-hibernate@ - GORM for Hibernate
* @grails-datastore-mongodb/grails-datastore-gorm-mongo@ - GORM for MongoDB project [http://grails.org/plugin/mongodb]
* @grails-datastore-neo4j@ - GORM for Neo4j project [http://grails.org/plugin/neo4j]
* @grails-datastore-redis/grails-datastore-gorm-redis@ - GORM for Redis project [http://grails.org/plugin/redis]
* @grails-datastore-cassandra/grails-datastore-gorm-cassandra@ - GORM for Cassandra project [http://grails.org/plugin/cassandra]


The documentation for each implementation is kept in the documentation subprojects that start with @grails-documentation@. There are documentation projects for the core API, MongoDB, Neo4j, Redis, and Cassandra.

Finally the Grails 3 plugins that are used to distribute the GORM implementations to end users can be found in the @grails-plugins@ directory and the @grails2-plugins@ directory for Grails 2.x.



