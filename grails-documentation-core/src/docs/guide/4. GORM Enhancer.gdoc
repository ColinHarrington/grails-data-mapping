Once you have implemented the lower-level APIs you can trivially provide a GORM API to a set of Grails domain classes. For example consider the following simple domain class:

{code}
import grails.persistence.*

@Entity
class Book {
    String title
}
{code}


The following setup code can be written to enable GORM for MongoDB:

{code}
// create context
def context = new MongoMappingContext(databaseName)
context.addPersistentEntity(Book)

// create datastore
def mongoDatastore = new MongoDatastore(context)
mongoDatastore.afterPropertiesSet()

// enhance
def enhancer = new MongoGormEnhancer(mongoDatastore, new DatastoreTransactionManager(datastore: mongoDatastore))
enhancer.enhance()

// use GORM!
def books = Book.list()
{code}

They key part to enabling the usage of all the GORM methods (@list()@, dynamic finders etc.) is the usage of the @MongoGormEnhancer@. This class subclasses @org.grails.datastore.gorm.GormEnhancer@ and provides some extensions to GORM specific to MongoDB. A subclass is not required however and if you don't require any datastore specific extensions you can just as easily use the regular @GormEnhancer@:

{code}
def enhancer = new GormEnhancer(mongoDatastore, new DatastoreTransactionManager(datastore: mongoDatastore))
enhancer.enhance()
{code}