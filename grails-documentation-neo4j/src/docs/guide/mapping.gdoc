GORM for Neo4j will map each Grails domain instance to a Node in the node space. For example given the following domain class:


{code}
class Pet {
    String name
}
{code}

When an instance of @Pet@ is saved:

{code}
def p = new Pet(name:"Dino")
p.save(flush:true)
{code}

Then the following Cypher CREATE is issued:

{code}
CREATE (n2:Pet {props})
{code}

The properties of the class are converted to native Neo4j types and set as the @props@ parameter to the query.

{note}
If you want to see what queries GORM for Neo4j generates, enabling logging for the @org.grails.datastore.gorm.neo4j@ package
{note}
