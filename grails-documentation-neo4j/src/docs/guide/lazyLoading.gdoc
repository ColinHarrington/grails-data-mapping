When retrieving a GORM entity and its associations by default single-ended associations will only retrieve the association id, whilst associations to many objects will not retrieve the association at all until it is accessed. This is called lazy loading.

For example given the following domain model:

{code}
class League {
    String name
    static hasMany = [clubs:Club]
}
class Club {
    String name
    static belongsTo = [league:League]
    static hasMany = [teams: Team ]
}
class Team  {
    String name
    static belongsTo = [club:Club]
}
{code}

When you retrieve the @Club@ by name:

{code}
def club = Club.findByName("Manchester United")
{code}

You will get the following Cypher query:

{code}
MATCH (n:Club) WHERE ( n.__id__={1} )
OPTIONAL MATCH(n)-[:LEAGUE]->(leagueNode)
RETURN n as data, collect(DISTINCT leagueNode.__id__) as leagueIds
{code}

As you can see the @teams@ association is not loaded in the query, and only the ID of the @league@ association is retrieved. If you then iterate over the teams you will get a second query to obtain the teams:

{code}
for(team in club.teams) {
    println team.name
}
{code}

The query generated will be:

{code}
MATCH (from:Club)<-[:CLUB]-(to:Team) WHERE from.__id__ = {id} RETURN to as data
{code}

If you wish to avoid this secondary query to retrieve the data you can do so using an eager query:

{code}
// using a dynamic finder
def club = Club.findByName("Manchester United", [fetch:[teams:'join']])

// using a where queries
def query = Club.where { name == "Manchester United" }
                .join('teams')
def club = query.find()

// using criteria
def query = Club.createCriteria()
def club = query.get {
    eq 'name', "Manchester United"
    join 'teams'
}
{code}


This will instead generate the following query:

{code}
MATCH (n:Club) WHERE ( n.name={1} )
OPTIONAL MATCH(n)<-[:CLUB]-(teamsNode)
OPTIONAL MATCH(n)-[:LEAGUE]->(leagueNode)
RETURN n as data, collect(DISTINCT leagueNode.__id__) as leagueIds, collect(DISTINCT teamsNode) as teamsNodes
{code}

As you can see the associated team nodes are loaded by the query. If you prefer this to happen for every query, then this can also be configured in the mapping:

{code}
class Club {
    ...

    static mapping = {
       teams fetch:"eager"
    }
}
{code}

You can also configure the collection ids to be eagerly loaded, but the instances themselves to be lazy loaded via proxies:

{code}
class Club {
    ...

    static mapping = {
       teams fetch:"eager", lazy:true
    }
}
{code}