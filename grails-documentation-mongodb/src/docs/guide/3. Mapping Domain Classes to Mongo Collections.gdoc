h4. Basic Mapping

The way GORM for Mongo works is to map each domain class to a Mongo collection. For example given a domain class such as:

{code}
class Person {
    String firstName
    String lastName
    static hasMany = [pets:Pet]
}
{code}

This will map onto a Mongo [DBCollection|http://api.mongodb.org/java/current/com/mongodb/DBCollection.html] called "person".

h4. Embedded Documents

It is quite common in Mongo to embed documents within documents (nested documents). This can be done with GORM embedded types:

{code}
class Person {
    String firstName
    String lastName
    Address address
    static embedded = ['address']
}
{code}

You can map embedded lists and sets of documents/domain classes:

{code}
class Person {
    String firstName
    String lastName
    Address address
    List otherAddresses
    static embedded = ['address', 'otherAddresses']
}
{code}

h4. Basic Collection Types

You can also map lists and maps of basic types (such as strings) simply by defining the appropriate collection type:

{code}
class Person {
    List<String> friends
    Map pets
}

...

new Person(friends:['Fred', 'Bob'], pets:[chuck:"Dog", eddie:'Parrot']).save(flush:true)
{code}

Basic collection types are stored as native ArrayList and BSON documents within the Mongo documents.

h4. Customized Collection and Database Mapping

You may wish to customize how a domain class maps onto a @DBCollection@. This is possible using the @mapping@ block as follows:

{code}
class Person {
    ..
    static mapping = {
        collection "mycollection"
        database "mydb"
    }
}
{code}

In this example we see that the @Person@ entity has been mapped to a collection called "mycollection" in a database called "mydb".

You can also control how an individual property maps onto a Mongo Document field (the default is to use the property name itself):

{code}
class Person {
    ..
    static mapping = {
        firstName attr:"first_name"
    }
}
{code}

For non-embedded associations by default GORM for MongoDB will map links between documents using MongoDB [database references|http://www.mongodb.org/display/DOCS/Database+References] also known as @DBRefs@.

If you prefer not to use DBRefs then you tell GORM to use direct links by using the @reference:false@ mapping:

{code}
class Person {
    ..
    static mapping = {
        address reference:false
    }
}
{code}
