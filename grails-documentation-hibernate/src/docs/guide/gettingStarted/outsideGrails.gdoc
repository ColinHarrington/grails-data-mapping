If you wish to use GORM for Hibernate outside of a Grails application you should declare the necessary dependencies, for example in Gradle:

{code}
compile "org.grails:grails-datastore-gorm-hibernate4:VERSION"
{code}

Then annotate your entities with the @grails.gorm.annotation.Entity@ annotation:

{code}
@Entity
class Person {
    String name
}
{code}

Then you need to place the bootstrap logic somewhere in your application which uses @HibernateDatastoreSpringInitializer@:

{code}
def initializer = new HibernateDatastoreSpringInitializer(Person)
def applicationContext = initializer.configure()

println Person.count()
{code}

For configuration you can either pass a map or an instance of the @org.springframework.core.env.PropertyResolver@ interface:

{code}
def initializer = new HibernateDatastoreSpringInitializer(['hibernate.log_sql':'true'], Person)
def applicationContext = initializer.configure()

println Person.count()
{code}

If you are using Spring with an existing @ApplicationContext@ you can instead call @configureForBeanDefinitionRegistry@ prior to refreshing the context. You can pass the Spring @Environment@ object to the constructor for configuration:

{code}
ApplicationContext myApplicationContext = ...
def initializer = new HibernateDatastoreSpringInitializer(myApplicationContext.getEnvironment(), Person)
initializer.configureForBeanDefinitionRegistry(myApplicationContext)

println Person.count()
{code}

Note in this case GORM expects there to be a bean named @dataSource@ present.