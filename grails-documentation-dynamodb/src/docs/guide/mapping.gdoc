h3. Mapping to AWS Tables

The way GORM for DynamoDB works is to map each domain class to a AWS DynamoDB domain.
For example, given a domain class such as:

{code}
class Person {
    String id
    String firstName
    String lastName
    static hasMany = [pets:Pet]

    static mapWith = "dynamodb"
}
{code}

The plugin will map @Person@ class to a DynamoDB table called "Person".
By default the table name will be the class name, however it can be explicitly specified:

{code}
class Person {
    String id
    String firstName
    String lastName
    static hasMany = [pets:Pet]

    static mapWith = "dynamodb"
    static mapping = {
        table 'PEOPLE'
    }
}
{code}

In this case @Person@ class will be mapped to 'PEOPLE' DynamoDB table.

Please note: _if you specified a table name prefix in the configuration, all table names will be prefixed_. For example, if you specified
{code}
grails {
    dynamodb {
        accessKey = '...'
        secretKey = '...'
        tableNamePrefix = 'DEV_' //optional, used when the same AWS account is shared between more than one environment
    }
}
{code}
then resulting table name will be DEV_Person for first example and DEV_PEOPLE for second example.

h3. Mapping to AWS Attributes

By default, each java property will be mapped as an identically named AWS DynamoDB attribute.
For example, given a domain class such as:

{code}
class Person {
    String id
    String firstName
    String lastName

    static mapWith = "dynamodb"
}
{code}

will result in the following attribute names in 'Person' domain:
* firstName
* lastName

@id@ field is always mapped to @itemName()@ for the record representing this domain class instance.

It is possible to specify custom AWS attribute names for each java attribute:

{code}
class Person {
    String id
    String firstName
    String lastName

    static mapWith = "dynamodb"
    static mapping = {
        firstName key:'FIRST_NAME'
        lastName key:'LAST_NAME'
    }
}
{code}
