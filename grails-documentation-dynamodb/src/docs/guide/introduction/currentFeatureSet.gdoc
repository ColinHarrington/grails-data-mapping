This implementation tries to be as compatible as possible with GORM for Hibernate. 
In general you can refer to the [GORM documentation|http://grails.org/doc/latest/guide/5.%20Object%20Relational%20Mapping%20(GORM).html]
for usage information.

The following key features are supported by the current version dynamodb plugin:

* Simple persistence methods
* Dynamic finders
* Criteria queries
* Named queries
* Inheritance of domain classes (parent properties are stored in the child)
* Query by example
* Customizable AWS DynamoDB table name per domain object
* Customizable AWS DynamoDB attribute name per attribute in domain object
* Customizable (optional) prefix for all AWS DynamoDB table - useful when same AWS account is used for more than one environment (DEV and QA)
* Hilo numeric id generator to use as alternative to default UUID
* Enum fields are supported
* Declaration of provisioned read and write throughput on per-domain class level (and ability to use application-wide default values as well)

The current version of dynamodb plugin has the following limitations:

* Does not support Embedded types
* Does not support HQL queries
* Does not support Dirty checking methods
* Does not support Range keys (feature of DynamoDB)
* Does not support Many-to-many associations (these can be modelled with a mapping class)
* Does not support Any direct interaction with the Hibernate API
* Does not support Custom Hibernate user types

There may be other limitations not mentioned here so in general it shouldn't be 
expected that an application based on GORM for Hibernate will work without some tweaking involved.
Furthermore, migration from SQL to NoSQL storage with eventual consistency (such as DynamoDB)
will require a re-design of the application
at the fundamental level (see 'eventual consistency' in the next chapter).
Having said that, the large majority of common GORM functionality is supported, and this dynamodb plugin is a good option
(in author's eyes) for a from-scratch rapid project development. In this scenario AWS DynamoDB allows developer to
focus purely on the grails application without setting up and managing a dev/production cluster of database server instances.

